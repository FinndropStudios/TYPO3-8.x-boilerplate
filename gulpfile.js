'use strict';

var
	gulp = require('gulp'),
	concat = require('gulp-concat'),
	sourcemaps = require('gulp-sourcemaps'),
	uglify = require('gulp-uglify'),
	sass = require('gulp-sass'),
	autoprefixer = require('gulp-autoprefixer'),
	minifyCSS = require('gulp-minify-css'),
	watch = require('gulp-watch'),
	gulpif = require('gulp-if'),
	jshint = require('gulp-jshint'),
	stylish = require('jshint-stylish'),
	path = require('path'),
	chalk = require('chalk'),
	gulpFilter = require('gulp-filter'),
	mainBowerFiles = require('main-bower-files'),
	map = require('map-stream'),
	rename = require('gulp-rename'),
	insert = require('gulp-insert'),
	plumber = require('gulp-plumber'),
	fs = require('fs'),
	runSequence = require('run-sequence');

var baseDirectorySources = "FrontendResources";
var baseDirectoryTarget = "typo3conf/ext/website_template/Resources/Public";
var jshintOptions = JSON.parse(fs.readFileSync('.jshintrc', 'utf8'));

var settings = {
	src: {
		scss: baseDirectorySources + '/Scss',
		bower: baseDirectorySources + '/BowerComponents',
		js: baseDirectorySources + '/Js',
		resources: baseDirectorySources + '/Resources'
	},
	dest: {
		scss: baseDirectoryTarget + '/Css',
		bower: baseDirectoryTarget + '/BowerComponents',
		bowerCombinedFile: 'bower_combined', // Without ending
		js: baseDirectoryTarget + '/Js',
		jsCombinedFile: 'scripts_combined', // Without ending
		resources: baseDirectoryTarget
	}
};

var fileFilter = {
	js: ['*.js', '**/*.js'],
	img: ['*', '**/*'],
	bower: {
		js: ['**/*.js'],
		css: ['**/*.css', '**/*.scss'],
		other: ['**/*', '!**/*.js', '!**/*.css', '!**/*.scss', '!**/*.map']
	}
};

var autogeneratedHeader =
	"/*! ================================================\n" +
	"    |       THIS FILE HAS BEEN AUTOGENERATED       |\n" +
	"    |                 DO NOT EDIT!                 |\n" +
	"    =============================================== */\n\n\n";

// ===============================================
// Convert SCSS to CSS
//
// settings.src.scss -> settings.dest.scss
//
gulp.task('convert:scss', function() {
	console.log(chalk.green('-------------------------------------------------- CONVERT - scss'));

	return gulp.src([settings.src.scss + '/*.scss'])
		.pipe(plumber())
		.pipe(sass({
			includePaths: [settings.src.scss]
		}).on('error', sass.logError))
		.pipe(autoprefixer())
		.pipe(insert.prepend(autogeneratedHeader))
		.pipe(gulp.dest(settings.dest.scss))
		.pipe(rename({suffix: '.min'}))
		.pipe(sourcemaps.init())
		.pipe(minifyCSS({
			keepSpecialComments: 1,
			processImportFrom: ['local']
		}))
		.pipe(sourcemaps.write('./'))
		.pipe(gulp.dest(settings.dest.scss));

});

// ===============================================
// Convert all
//
gulp.task('convert', ['convert:scss']);

// ===============================================
// Concats bower JS and CSS files to a single file
// Also copies bower assets to the new location (see bower.json)
//
// {settings.src.bower} -> {settings.dest.bower}/{settings.dest.bowerCombinedFile}[.min|][.css|.js]
//
gulp.task('concat:bower', function() {
	console.log(chalk.green('-------------------------------------------------- CONCAT - bower'));

	var jsFilter = gulpFilter(fileFilter.bower.js, {restore: true}),
		cssFilter = gulpFilter(fileFilter.bower.css, {restore: true}),
		assetsFilter = gulpFilter(fileFilter.bower.other, {restore: true});

	var targetBaseFileName = settings.dest.bowerCombinedFile || '_bower';

	return gulp.src(mainBowerFiles(), {base: settings.src.bower})
		// START Concat JS Files
		.pipe(jsFilter)

		// Unminified version
		.pipe(sourcemaps.init())
		.pipe(concat(targetBaseFileName + '.js'))
		.pipe(insert.prepend(autogeneratedHeader))
		.pipe(gulp.dest(settings.dest.bower))

		// Minified version
		.pipe(rename(targetBaseFileName + '.min.js'))
		.pipe(uglify({
			preserveComments: 'some'
		}))
		.pipe(sourcemaps.write('./sourcemaps'))
		.pipe(gulp.dest(settings.dest.bower))

		.pipe(jsFilter.restore)
		// END Concat JS Files

		// START Concat CSS Files
		.pipe(cssFilter)

		// Unminified version
		.pipe(sourcemaps.init())
		.pipe(sass())
		.pipe(map(function(file, callback) {
			var relativePath = path.dirname(path.relative(path.resolve(settings.src.bower), file.path));

			// CSS path resolving
			// Taken from https://github.com/enyojs/enyo/blob/master/tools/minifier/minify.js
			var contents = file.contents.toString().replace(/url\([^)]*\)/g, function(match) {
				// find the url path, ignore quotes in url string
				var matches = /url\s*\(\s*(('([^']*)')|("([^"]*)")|([^'"]*))\s*\)/.exec(match),
					url = matches[3] || matches[5] || matches[6];

				// Don't modify data and http(s) urls
				if(/^data:/.test(url) || /^http(:?s)?:/.test(url)) {
					return "url(" + url + ")";
				}
				return "url(" + path.join(relativePath, url) + ")";
			});

			// Remove Mappings
			contents = contents.toString().replace(/(\/\*#.?sourceMappingURL=.+.?\*\/)/g, "");

			file.contents = new Buffer(contents);

			callback(null, file)
		}))
		.pipe(concat(targetBaseFileName + '.css'))
		.pipe(insert.prepend(autogeneratedHeader))
		.pipe(sourcemaps.write('./sourcemaps'))
		.pipe(gulp.dest(settings.dest.bower))

		// Minified version
		.pipe(rename(targetBaseFileName + '.min.css'))
		.pipe(minifyCSS({
			keepSpecialComments: 1,
			processImportFrom: ['local']
		}))
		.pipe(gulp.dest(settings.dest.bower))

		.pipe(cssFilter.restore)
		// END Concat CSS Files

		// START copy assets
		.pipe(assetsFilter)
		.pipe(gulp.dest(settings.dest.bower))
		.pipe(assetsFilter.restore);
	// END copy assets
});

// ===============================================
// JSHint
//
gulp.task('jshint', function() {
	console.log('-------------------------------------------------- JS - HINT');

	var jsFilter = gulpFilter(fileFilter.js, {restore: true});

	return gulp.src([settings.src.js + '/*.js', settings.src.js + '/**/*.js', '!' + settings.src.js + '/libs/*.js',  '!' + settings.src.js + '/libs/**/*.js'])
		.pipe(jsFilter)
		.pipe(jshint(jshintOptions))
		.pipe(jshint.reporter(stylish));

});

// ===============================================
// Concat js
//
gulp.task('concat:js', ['jshint'], function() {
	console.log(chalk.green('-------------------------------------------------- CONCAT - js'));

	var jsFilter = gulpFilter(fileFilter.js, {restore: true});
	var targetBaseFileName = settings.dest.jsCombinedFile || '_scripts_combined';

	return gulp.src([settings.src.js + '/*.js', settings.src.js + '/**/*.js'])
		.pipe(plumber())
		.pipe(jsFilter)
		.pipe(sourcemaps.init())
		.pipe(concat(targetBaseFileName + '.js'))
		.pipe(insert.prepend(autogeneratedHeader))
		.pipe(gulp.dest(settings.dest.js))

		// Minified version
		.pipe(rename(targetBaseFileName + '.min.js'))
		.pipe(uglify({
			preserveComments: 'some'
		}))
		.pipe(sourcemaps.write('./'))
		.pipe(gulp.dest(settings.dest.js))

		.pipe(jsFilter.restore);

});

// ===============================================
// Concat all
//
gulp.task('concat', ['concat:bower', 'concat:js']);

// ===============================================
// Copy Resources
//
gulp.task('copy:resources', function() {
	console.log(chalk.green('-------------------------------------------------- COPY - resources'));

	return gulp.src([settings.src.resources + '/*', settings.src.resources + '/**/*'])
		.pipe(gulp.dest(settings.dest.resources));
});

// ===============================================
// Copy all
//
gulp.task('copy', ['copy:resources']);

// ===============================================
// File watcher
//
gulp.task('watch:init', function() {
	console.log('Starting watchers...');

	var filesChangedMessage = function(event) {
		console.log(chalk.red('-------------------------------------------------->>>> File ' + event.path + ' was ------->>>> ' + event.type));
	};

	// SCSS
	gulp.watch([settings.src.scss + '/*.scss', settings.src.scss + '/**/*.scss'], ['convert:scss']).on('change', filesChangedMessage);

	// Bower
	gulp.watch(['bower.json'], ['concat:bower']).on('change', filesChangedMessage);

	// JS
	gulp.watch([
		settings.src.js + '/*.js',
		settings.src.js + '/**/*.js',
		'!' + settings.dest.js + '/' + settings.dest.jsCombinedFile + '*.js'
	], ['concat:js']).on('change', filesChangedMessage);

	// Resources
	gulp.watch([
		settings.src.resources + '/*',
		settings.src.resources + '/**/*'
	], ['copy:resources']).on('change', filesChangedMessage);

});

gulp.task('build', function() {
	runSequence(
		['convert', 'concat'], // Async
		'copy' // Sync
	);
});

gulp.task('watch', function() {
	runSequence(
		'watch:init'
	);
});

gulp.task('default', function() {
	runSequence(
		['convert', 'concat'], // Async
		'copy', // Sync
		'watch:init' // Sync
	);
});